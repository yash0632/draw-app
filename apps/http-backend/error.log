{"level":"error","service":"user-service"}
{"level":"error","message":"\nInvalid `client.user.create()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\userrepository.ts:15:44\n\n  12 \n  13 createUser=async(username:string,email:string,hashPassword:string,avatarPhoto:string|undefined)=>{\n  14     try{\n→ 15         const user = await client.user.create(\nThe table `public.User` does not exist in the current database.","service":"user-service"}
{"level":"error","message":"User not found","service":"user-service"}
{"level":"error","message":"\nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42703`. Message: `column \"createdAt\" does not exist`","service":"user-service"}
{"level":"error","message":"\nInvalid `prisma.$queryRaw()` invocation:\n\n\nRaw query failed. Code: `42703`. Message: `column \"createdAt\" does not exist`","service":"user-service"}
{"level":"error","message":"Room not found","service":"user-service"}
{"level":"error","message":"Room not found","service":"user-service"}
{"level":"error","message":"Room not found","service":"user-service"}
{"level":"error","message":"Room not found","service":"user-service"}
{"level":"error","message":"Room not found","service":"user-service"}
{"level":"error","message":"Room not found","service":"user-service"}
{"level":"error","message":"Room not found","service":"user-service"}
{"level":"error","message":"Room not found","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany({\n              where: {\n            +   roomId: {\n            +     equals: Int | IntFieldRefInput,\n            +     in: Int[] | ListIntFieldRefInput,\n            +     notIn: Int[] | ListIntFieldRefInput,\n            +     lt: Int | IntFieldRefInput,\n            +     lte: Int | IntFieldRefInput,\n            +     gt: Int | IntFieldRefInput,\n            +     gte: Int | IntFieldRefInput,\n            +     not: Int | NestedIntFilter\n            +   }\n              },\n              orderBy: {\n                id: \"desc\"\n              },\n              take: 50\n            })\n\nArgument `roomId` is missing.","service":"user-service"}
{"level":"error","message":"\nInvalid `client.room.findFirst()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\roomrepository.ts:53:44\n\n  50 \n  51 getRoomId = async(slug:string)=>{\n  52     try{\n→ 53         const room = await client.room.findFirst(\nTimed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 13)","service":"user-service"}
{"level":"error","message":"\nInvalid `client.room.findFirst()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\roomrepository.ts:53:44\n\n  50 \n  51 getRoomId = async(slug:string)=>{\n  52     try{\n→ 53         const room = await client.room.findFirst(\nTimed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 13)","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany(\nTimed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 13)","service":"user-service"}
{"level":"error","message":"\nInvalid `client.chat.findMany()` invocation in\nD:\\devinterview\\projects\\draw-app\\apps\\http-backend\\src\\repository\\chat.repository.ts:4:41\n\n  1 import client from \"@repo/db/prismaclient\";\n  2 export async function GetChatsFromDb(roomId:number){\n  3     try{    \n→ 4         const chats = await client.chat.findMany(\nTimed out fetching a new connection from the connection pool. More info: http://pris.ly/d/connection-pool (Current connection pool timeout: 10, connection limit: 13)","service":"user-service"}
